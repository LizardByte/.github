---
name: Update pacman repo (called)
permissions:
  contents: read

on:
  workflow_call:
    secrets:
      GH_EMAIL:
        description: 'GitHub email to use for the workflow.'
        required: true
      GH_NAME:
        description: 'GitHub name to use for the workflow.'
        required: true
      GH_TOKEN:
        description: 'GitHub token to use for the workflow.'
        required: true

jobs:
  update-homebrew-release:
    runs-on: ubuntu-latest
    environment:
      name: pacman-repo
      url: ${{ steps.create-pr.outputs.pull-request-url }}
    env:
      PACMAN_REPO: ${{ github.repository_owner }}/pacman-repo
    steps:
      - name: Check if pacman repo
        id: check-label
        env:
          TOPIC: pacman-pkg
        uses: actions/github-script@v8
        with:
          script: |
            const topic = process.env.TOPIC;
            console.log(`Checking if repo has topic: ${topic}`);

            const repoTopics = await github.rest.repos.getAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log(`Repo topics: ${repoTopics.data.names}`);

            const hasTopic = repoTopics.data.names.includes(topic);
            console.log(`Has topic: ${hasTopic}`);

            core.setOutput('hasTopic', hasTopic);

      - name: Check if latest GitHub release
        id: check-release
        if: >-
          steps.check-label.outputs.hasTopic == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            core.setOutput('isLatestRelease', latestRelease.data.tag_name === context.payload.release.tag_name);

      - name: Checkout pacman-repo
        if: >-
          steps.check-label.outputs.hasTopic == 'true' &&
          steps.check-release.outputs.isLatestRelease == 'true'
        uses: actions/checkout@v5
        with:
          repository: ${{ env.PACMAN_REPO }}

      - name: Prep
        id: prep
        if: >-
          steps.check-label.outputs.hasTopic == 'true' &&
          steps.check-release.outputs.isLatestRelease == 'true'
        run: |
          echo "pkg_name=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> "${GITHUB_OUTPUT}"

      - name: Download release asset
        id: download
        if: >-
          steps.check-label.outputs.hasTopic == 'true' &&
          steps.check-release.outputs.isLatestRelease == 'true'
        uses: robinraju/release-downloader@v1.12
        with:
          repository: "${{ github.repository }}"
          tag: "${{ github.event.release.tag_name }}"
          fileName: "*.pkg.tar.gz"
          tarBall: false
          zipBall: false
          out-file-path: "pkgbuilds/${{ steps.prep.outputs.pkg_name }}"
          extract: true

      - name: Remove pkg.tar.gz
        if: >-
          steps.check-label.outputs.hasTopic == 'true' &&
          steps.check-release.outputs.isLatestRelease == 'true' &&
          fromJson(steps.download.outputs.downloaded_files)[0]
        run: rm -f "${{ fromJson(steps.download.outputs.downloaded_files)[0] }}"

      - name: Create/Update Pull Request
        id: create-pr
        if: >-
          steps.check-label.outputs.hasTopic == 'true' &&
          steps.check-release.outputs.isLatestRelease == 'true' &&
          fromJson(steps.download.outputs.downloaded_files)[0]
        uses: peter-evans/create-pull-request@v7
        with:
          author: "${{ secrets.GH_NAME }} <${{ secrets.GH_EMAIL }}>"
          committer: "${{ secrets.GH_NAME }} <${{ secrets.GH_EMAIL }}>"
          add-paths: |
            pkgbuilds/*
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "chore: Update ${{ github.repository }} to ${{ github.event.release.tag_name }}"
          branch: bot/bump-${{ github.repository }}-${{ github.event.release.tag_name }}
          delete-branch: true
          title: "chore: Update ${{ github.repository }} to ${{ github.event.release.tag_name }}"
          body: ${{ github.event.release.body }}
          labels: |
            auto-approve
            auto-merge

      - name: Automerge PR
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        if: >-
          steps.check-label.outputs.hasTopic == 'true' &&
          steps.check-release.outputs.isLatestRelease == 'true' &&
          fromJson(steps.download.outputs.downloaded_files)[0]
        run: |
          gh pr merge \
            --auto \
            --delete-branch \
            --squash \
            "${{ steps.create-pr.outputs.pull-request-number }}"

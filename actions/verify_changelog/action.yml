name: "Verify Changelog"
description: "Verify changelog was updated."
inputs:
  token:
    description: 'Github Token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Parse Changelog Entry
      id: changelog_parser
      uses: coditory/changelog-parser@v1  # https://github.com/coditory/changelog-parser

    - name: Print changelog_parser info
      shell: bash
      run: |
        echo "changelog_parser(version): ${{ steps.changelog_parser.outputs.version }}"
        echo "changelog_parser(versionMajor): ${{ steps.changelog_parser.outputs.versionMajor }}"
        echo "changelog_parser(versionMinor): ${{ steps.changelog_parser.outputs.versionMinor }}"
        echo "changelog_parser(versionPatch): ${{ steps.changelog_parser.outputs.versionPatch }}"
        echo "changelog_parser(date): ${{ steps.changelog_parser.outputs.date }}"
        echo "changelog_parser(status): ${{ steps.changelog_parser.outputs.status }}"
        echo "changelog_parser(description): ${{ steps.changelog_parser.outputs.description }}"

        echo "NEXT_VERSION_BARE=${{ steps.changelog_parser.outputs.version }}" >> $GITHUB_ENV
        echo "NEXT_VERSION=v${{ steps.changelog_parser.outputs.version }}" >> $GITHUB_ENV

    - name: Get last release
      id: get_latest_release
      uses: InsonusK/get-latest-release@v1.0.1  # https://github.com/InsonusK/get-latest-release
      with:
        myToken: ${{ inputs.token }}
        exclude_types: "draft|prerelease"
        view_top: 1

    - name: Print get_latest_release info
      shell: bash
      run: |
        echo "get_latest_release(id): ${{ steps.get_latest_release.outputs.id }}"
        echo "get_latest_release(name): ${{ steps.get_latest_release.outputs.name }}"
        echo "get_latest_release(tag_name): ${{ steps.get_latest_release.outputs.tag_name }}"
        echo "get_latest_release(created_at): ${{ steps.get_latest_release.outputs.created_at }}"
        echo "get_latest_release(draft): ${{ steps.get_latest_release.outputs.draft }}"
        echo "get_latest_release(prerelease): ${{ steps.get_latest_release.outputs.prerelease }}"

    - name: Changelog Version
      if: ${{ env.NEXT_VERSION == steps.get_latest_release.outputs.tag_name }}
      # fail the workflow because the versions match
      shell: bash
      run: |
        echo Changelog Version: "${{ steps.changelog_parser.outputs.version }}"
        echo Last Released Version: "${{ steps.get_latest_release.outputs.tag_name }}"
        exit 1

outputs:
  changelog_parser_version:
    description: 'Version from the changelog entry with "v" prefix added. Example: v2.1.0'
    value: v${{ steps.changelog_parser.outputs.version }}
  changelog_parser_version_bare:
    description: 'Version from the changelog entry without "v" prefix. Example: 2.1.0'
    value: ${{ steps.changelog_parser.outputs.version }}
  changelog_parser_versionMajor:
    description: 'Major version part. Example: 2 for version 2.1.0'
    value: ${{ steps.changelog_parser.outputs.versionMajor }}
  changelog_parser_versionMinor:
    description: 'Minor version part. Example: 1 for version 2.1.0'
    value: ${{ steps.changelog_parser.outputs.versionMinor }}
  changelog_parser_versionPatch:
    description: 'Patch version part. Example: 0 for version 2.1.0'
    value: ${{ steps.changelog_parser.outputs.versionPatch }}
  changelog_parser_date:
    description: 'Release date from the changelog entry. Example: 2020-08-22'
    value: ${{ steps.changelog_parser.outputs.date }}
  changelog_parser_status:
    description: 'Status from the changelog entry. One of: (prerelease, release, unreleased)'
    value: ${{ steps.changelog_parser.outputs.status }}
  changelog_parser_description:
    description: 'Content from the changelog entry found.'
    value: ${{ steps.changelog_parser.outputs.description }}

  latest_release_id:
    description: "Latest release Id"
    value: ${{ steps.get_latest_release.outputs.id }}
  latest_release_name:
    description: "Latest release name"
    value: ${{ steps.get_latest_release.outputs.name }}
  latest_release_tag_name:
    description: "Latest release tag name"
    value: ${{ steps.get_latest_release.outputs.tag_name }}
  latest_release_created_at:
    description: "Latest release creation date"
    value: ${{ steps.get_latest_release.outputs.created_at }}
  latest_release_draft:
    description: "Latest release draft type flag"
    value: ${{ steps.get_latest_release.outputs.draft }}
  latest_release_prerelease:
    description: "Latest release prerelease type flag"
    value: ${{ steps.get_latest_release.outputs.prerelease }}
